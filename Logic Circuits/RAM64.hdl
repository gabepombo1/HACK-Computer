// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=aLoad, b=bLoad, c=cLoad, d=dLoad, e=eLoad, f=fLoad, g=gLoad, h=hLoad);

    RAM8(in=in, load=aLoad, out=aOut, address=address[0..2]);
    RAM8(in=in, load=bLoad, out=bOut, address=address[0..2]);
    RAM8(in=in, load=cLoad, out=cOut, address=address[0..2]);
    RAM8(in=in, load=dLoad, out=dOut, address=address[0..2]);
    RAM8(in=in, load=eLoad, out=eOut, address=address[0..2]);
    RAM8(in=in, load=fLoad, out=fOut, address=address[0..2]);
    RAM8(in=in, load=gLoad, out=gOut, address=address[0..2]);
    RAM8(in=in, load=hLoad, out=hOut, address=address[0..2]);

    Mux8Way16(a=aOut, b=bOut, c=cOut, d=dOut, e=eOut, f=fOut, g=gOut, h=hOut, sel=address[3..5], out=out);
}