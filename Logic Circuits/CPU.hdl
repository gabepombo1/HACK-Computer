// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

//x is equal to D
//a tells you in addtion to D, what else will be input?
//when a=0, you're doing math with D and A
//when a=1, you're doing math with M and A

//in the 16 bit byte:
//first bit determines if it is an A or C instruction
//then next two bits mean nothing
//the next bit determines if you are using A or M for the ALU
//the six bits after that are the instructions for computation
//the three bits after that are instructions about where to store the computation
//the last three bits tell you in what conditions in the address will you jump to the a-register

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //if it is a C-instruction, then you take the ALU's out
    //if it is an A-instruction, then you just take the instruction itself
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=ARegisterIn);
    Not(in=instruction[15], out=AInstruction);
    Not(in=AInstruction, out=CInstruction);
    And(a=instruction[5], b=CInstruction, out=CInstructionWithLoad);
    Or(a=CInstructionWithLoad, b=AInstruction, out=LoadARegister);
    ARegister(in=ARegisterIn, load=LoadARegister, out=ARegisterOut, out[0..14]=addressM);

    //finds out if it is a C or A instruction and if d2 is true or false
    And(a=instruction[4], b=instruction[15], out=DRegisterANDOut);
    DRegister(in=ALUOut, load=DRegisterANDOut, out=DRegisterOut);

    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=AorM);
    And(a=instruction[15], b=instruction[3], out=writeM);
    ALU(x=DRegisterOut, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zr, ng=ng);

    //if these are both not true, then that means the number is greater than 0
    Not(in=ng, out=notNG);
    Not(in=zr, out=notZR);
    And(a=notNG, b=notZR, out=gz);
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    And(a=gz, b=instruction[0], out=j3);
    Or(a=j1, b=j2, out=j1j2);
    Or(a=j1j2, b=j3, out=allJs);
    And(a=instruction[15], b=allJs, out=jump);
    PC(in=ARegisterOut, load=jump, inc=true, reset=reset, out[0..14]=pc);

    }